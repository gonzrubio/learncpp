#include <iostream>

/*
    Recursion is a good chice when:
    - The recursive code is much simpler to implement.
    - The recursion depth can be limitied.
    - The iterative version of the algorithm requires managing a stack of data.
    - This isnt a performance-critical section of the code.
*/

void countDown(int n)
{
    std::cout << "push " << n << '\n' ;

    if (n > 1) // termination condition
        countDown(n-1);

    std::cout << "pop " << n << '\n' ;
}

int fibonacci(int n)
{
    // Note: This recursion algorithm is not very efficient since each
    // non-base case recults in two more recursive calls, this grows exponentially.

    // Base case.
    if (n == 0) return 0 ;
    else if (n == 1) return 1 ;
    // Recursive case.
    else return (fibonacci(n-1)+fibonacci(n-2)) ;
}

void printFib(int start, int stop, int (*fcnPtr)(int,int))
{
    for (int kk{0} ; kk < 13 ; kk++)
        std::cout << fibonacci(kk) << " " ;
    std::cout << '\n' ;
}

void ex()
{
    countDown(5) ;
    printFib(0,13,fibonacci) ;
    /*for (int kk{0} ; kk < 13 ; kk++)
        std::cout << fibonacci(kk) << " " ;
    std::cout << '\n' ;*/

}

int main()
{
    ex() ;

    return 0;
}
