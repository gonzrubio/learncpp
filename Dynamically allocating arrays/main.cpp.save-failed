#include <iostream>

using namespace std;

/*
    Unlike fixed arrays where the size must be known/fixed at compile time,
    dynamically allocating an array allows us to choose an array length at run time.
    ie. data_type variable_name[] ; Would cause compile error because size of array is not know at compile time.
*/

void first()
{
    int len ; // Length of array. Declaring it without initializing it, assigns a garbage value to it.
    cout << "Enter the number of elements in the array :" ;
    cin >> len ; // We change the value of len from garbage to the user input.
    int *arr{new int[len]{}} ; // Create a pointer variable holding int type. new int[] request memory from the heap.

    cout << "I just allocated an array of length " << len << endl ;

    // Indexing is equivalent to pointer adition and dereferencing
    cout << "The last value by default is: " << arr[len-1] << endl ;
    arr[len-1] = len ;
    cout << "The last value after initializing is: " << arr[len-1] << endl ;
    cout << "The first element is allocated at: " << &arr[len-1] << endl ;

    // It is important to free up memory before exiting function otherwise we will get memory leakage.
    delete[] arr // array from of delete.
    // No need to set make the pointer a null pointer since it will go out of scope after leaving this function.
    // Must free up memory specififcallly since the pointer will go out of scope and wont be able to access that location.
    // arr = nullptr ;
}

int main()
{
    first() ;

    return 0;
}
